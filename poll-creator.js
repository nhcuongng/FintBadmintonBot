const cron = require('node-cron');
const dayjs = require('dayjs');
require('dotenv').config()
const { URL_SEND_MESSAGE, URL_SEND_POLL } = require('./constant');
const { pollManager } = require('./poll-manager');

async function handleSendPoll() {
    console.log('At 10:22 on Wednesday.');

    if (!pollManager.isCallable) {
        pollManager.continue();
        throw new Error('Kh√¥ng th·ªÉ t·∫°o poll ƒë∆∞·ª£c');
    };

    const urlSendPoll = URL_SEND_POLL;
    // First, let's format the date in Vietnamese style
    const nextPlayDate = dayjs().add(2, 'day');
    const formattedDate = `${nextPlayDate.format('DD/MM/YYYY')} (${nextPlayDate.day() === 0 ? 'Ch·ªß Nh·∫≠t' : `Th·ª© ${nextPlayDate.day() + 1}`})`;

    try {
        const res = await fetch(urlSendPoll, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                chat_id: pollManager.chat_id,
                question: `üè∏ Anh ch·ªã em ∆°i! L·ªãch ƒë√°nh c·∫ßu tu·∫ßn n√†y: ${formattedDate}. M·ªçi ng∆∞·ªùi tham gia nh√©!`,
                options: ['Tham gia ch·∫Øc ch·∫Øn lu√¥n! üí™', 'Xin ph√©p b·∫≠n r·ªìi üò¢', 'C√≥ th·ªÉ tham gia (x√°c nh·∫≠n sau) ü§î'],
                "disable_notification": false,
                is_anonymous: false
            })
        });
        
        if (res.status === 200) {
            console.log('ƒê√£ g·ª≠i thƒÉm d√≤ th√†nh c√¥ng!');
        } else {
            const errorData = await res.json();
            throw new Error(JSON.stringify(errorData));
        }
    } catch (error) {
        console.error('Kh√¥ng g·ª≠i ƒë∆∞·ª£c thƒÉm d√≤:', error);
    }
}

const CRON_EXPRESSION_ON_WEDNESDAY = '22 10 * * 3'

// Ch·∫°y v√†o th·ª© t∆∞ h√†ng tu·∫ßn
cron.schedule(CRON_EXPRESSION_ON_WEDNESDAY, handleSendPoll);
