# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main", "develop"]

env:
  PM2_NAMESPACE: cau-long-bot
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - run: npm ci
    
    - name: Build application
      run: |
        npm i -g @vercel/ncc
        ncc build index.js -o dist
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 1

  deploy-develop:
    needs: build
    runs-on: ubuntu-latest
    environment: secret
    if: github.ref == 'refs/heads/develop'
    
    env:
      DEPLOY_DIR: ~/node-app-develop
      APP_NAME: develop-app
      PORT: 4001
      BOT_TOKEN: ${{ secrets.BOT_TOKEN_DEV }}

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy application
      run: |
        # Create deployment directory and deploy files
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ env.DEPLOY_DIR }}"
        scp -i ~/.ssh/id_rsa -r ./dist/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.DEPLOY_DIR }}/

    - name: Setup environment
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ${{ env.DEPLOY_DIR }} && \
          mkdir -p db && \
          cat > .env << EOF
        BOT_TOKEN=${{ env.BOT_TOKEN }}
        ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
        PORT=${{ env.PORT }}
        EOF"

    - name: Start/Restart PM2 application
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ${{ env.DEPLOY_DIR }} && \
          if pm2 list --namespace ${{ env.PM2_NAMESPACE }} | grep -q '${{ env.APP_NAME }}'; then
            pm2 restart ${{ env.APP_NAME }} --namespace ${{ env.PM2_NAMESPACE }} --update-env
          else
            pm2 start index.js --name ${{ env.APP_NAME }} --namespace ${{ env.PM2_NAMESPACE }}
          fi"

    - name: Verify deployment
      run: |
        sleep 10
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "curl -f http://localhost:${{ env.PORT }}/health || exit 1"

    - name: Cleanup SSH
      if: always()
      run: rm -f ~/.ssh/id_rsa

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    environment: secret
    if: github.ref == 'refs/heads/main'
    
    env:
      DEPLOY_DIR: ~/node-app
      APP_NAME: production-app
      PORT: 4000
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy application
      run: |
        # Create deployment directory and deploy files
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ env.DEPLOY_DIR }}"
        scp -i ~/.ssh/id_rsa -r ./dist/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.DEPLOY_DIR }}/

    - name: Setup environment
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ${{ env.DEPLOY_DIR }} && \
          mkdir -p db && \
          cat > .env << EOF
        BOT_TOKEN=${{ env.BOT_TOKEN }}
        ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
        EOF"

    - name: Start/Restart PM2 application
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd ${{ env.DEPLOY_DIR }} && \
          if pm2 list --namespace ${{ env.PM2_NAMESPACE }} | grep -q '${{ env.APP_NAME }}'; then
            pm2 restart ${{ env.APP_NAME }} --namespace ${{ env.PM2_NAMESPACE }} --update-env
          else
            pm2 start index.js --name ${{ env.APP_NAME }} --namespace ${{ env.PM2_NAMESPACE }}
          fi"

    - name: Verify deployment
      run: |
        sleep 10
        ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "curl -f http://localhost:${{ env.PORT }}/health || exit 1"

    - name: Cleanup SSH
      if: always()
      run: rm -f ~/.ssh/id_rsa
